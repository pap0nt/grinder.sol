import asyncio
import time
from aiogram import types, Dispatcher, Bot
from pathlib import Path
from utils.process_manager import ProcessManager
from core.logger import logger
from core.config import SUPERADMIN_ID

process_manager = ProcessManager()

def register_grind_handlers(dp: Dispatcher, bot: Bot):
    @dp.message_handler(commands=["grind"])
    async def grind_command(message: types.Message):
        if message.from_user.id not in SUPERADMIN_ID:
            logger.warning(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /grind –±–µ–∑ –ø—Ä–∞–≤")
            return await message.reply("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

        if process_manager.is_running(message.from_user.id):
            logger.info(f"‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É")
            return await message.reply("‚åõ –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞. –ù–∞–ø–∏—à–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

        args = message.get_args()
        if not args:
            return await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏ –ø—Ä–µ—Ñ–∏–∫—Å: /grind serg", parse_mode="HTML")

        prefix = args.strip()
        keyfile = Path("/tmp") / f"keypair-{prefix}.json"

        cmd = [
            "solana-keygen", "grind",
            "--starts-with", f"{prefix}:1",
            "--num-threads", "5",
            "--ignore-case",
            "--no-outfile"
        ]

        start_time = time.time()
        logger.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω grind –¥–ª—è '{prefix}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")

        progress_message = await message.reply(
            f"‚è≥ –ò—â—É –∞–¥—Ä–µ—Å —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º <code>{prefix}</code>. –ù–∞–ø–∏—à–∏ /cancel —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å.",
            parse_mode="HTML"
        )

        async def progress_updater():
            while process_manager.is_running(message.from_user.id):
                elapsed = int(time.time() - start_time)
                await asyncio.sleep(10)
                try:
                    await progress_message.edit_text(
                        f"‚è≥ –í—Å—ë –µ—â—ë –∏—â—É –∞–¥—Ä–µ—Å —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º <code>{prefix}</code>\n–ü—Ä–æ—à–ª–æ: <b>{elapsed}</b> —Å–µ–∫—É–Ω–¥",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

        updater_task = asyncio.create_task(progress_updater())

        proc = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        process_manager.add(message.from_user.id, proc)

        try:
            stdout, stderr = await proc.communicate()
        except asyncio.CancelledError:
            proc.kill()
            await proc.wait()
            process_manager.remove(message.from_user.id)
            updater_task.cancel()
            logger.info(f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
            return await message.reply("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.")

        process_manager.remove(message.from_user.id)
        updater_task.cancel()

        if proc.returncode != 0:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è '{prefix}': {stderr.decode()}")
            return await message.reply(f"‚ùå –û—à–∏–±–∫–∞:\n<pre>{stderr.decode()}</pre>", parse_mode="HTML")

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º stdout –≤ —Ñ–∞–π–ª
        try:
            with open(keyfile, "wb") as f:
                f.write(stdout)
            logger.info(f"üíæ –ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {keyfile}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á–∏: {e}")
            return await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á–∏.")

        await message.reply_document(keyfile.open("rb"), caption=f"üì¶ –ì–æ—Ç–æ–≤–æ! –ê–¥—Ä–µ—Å —Å '{prefix}'")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å –¥–ª—è '{prefix}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")

        try:
            keyfile.unlink()
            logger.info(f"üßπ –§–∞–π–ª {keyfile} —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {keyfile}: {e}")


    @dp.message_handler(commands=["cancel"])
    async def cancel_command(message: types.Message):
        from config import SUPERADMIN_ID
        if message.from_user.id not in SUPERADMIN_ID:
            logger.warning(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /cancel –±–µ–∑ –ø—Ä–∞–≤")
            return await message.reply("\u26d4\ufe0f –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

        result = await process_manager.cancel(message.from_user.id)
        if result:
            logger.info(f"‚ùå –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
            await message.reply("\u274c –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        else:
            await message.reply("\u2139\ufe0f –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.")
